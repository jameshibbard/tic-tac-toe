// Generated by CoffeeScript 1.9.0
(function() {
  $(function() {
    var Tic;
    Tic = {
      data: {
        turns: 0,
        x: {},
        o: {},
        gameOver: false
      },
      assignRoles: function() {
        var randomRole, randomRole2, roles, tpl;
        roles = ["X", "O"];
        randomRole = roles[Math.floor(Math.random() * roles.length)];
        if (randomRole === "X") {
          randomRole2 = "O";
        } else {
          randomRole2 = "X";
        }
        this.data.rolep1 = {};
        this.data.rolep2 = {};
        this.data.rolep1[randomRole] = true;
        this.data.rolep2[randomRole2] = true;
        tpl = "<p>X starts first!</p>";
        tpl += "<p>" + this.data.player1 + " is playing " + randomRole + "</p>";
        tpl += "<p>" + this.data.player2 + " is playing " + randomRole2 + "</p>";
        tpl += "<p>" + this.data.player1 + " has " + this.data.p1stats.wins + " wins and " + this.data.p1stats.loses + " loses</p>";
        tpl += "<p>" + this.data.player2 + " has " + this.data.p2stats.wins + " wins and " + this.data.p2stats.loses + " loses</p>";
        return this.addMessage(tpl);
      },
      initialize: function() {
        var tic, _i;
        this.data.player1 = $("input[name='pl-1']").val();
        this.data.player2 = $("input[name='pl-2']").val();
        this.data.p1stats = localStorage[this.data.player1] || {
          wins: 0,
          loses: 0
        };
        if (typeof this.data.p1stats === "string") {
          this.data.p1stats = JSON.parse(this.data.p1stats);
        }
        this.data.p2stats = localStorage[this.data.player2] || {
          wins: 0,
          loses: 0
        };
        if (typeof this.data.p2stats === "string") {
          this.data.p2stats = JSON.parse(this.data.p2stats);
        }
        $("form").hide('slow');
        $("#tic").html("");
        $(".notice, header div").slideUp('slow');
        this.data.gameOver = false;
        for (tic = _i = 0; _i <= 8; tic = ++_i) {
          $("<div class='tic'>").appendTo("#tic");
        }
        this.addListeners();
        return this.assignRoles();
      },
      addToScore: function(winningParty) {
        this.data.turns = 0;
        this.data.x = {};
        this.data.o = {};
        this.data.gameOver = true;
        this.addMessage("<a href='JavaScript:void(0)' class='play-again'>Play Again?</a>");
        if (winningParty === "none") {
          this.addAlert("The game was a tie.");
          return false;
        }
        if (this.data.rolep1[winningParty] != null) {
          ++this.data.p1stats.wins;
        } else {
          ++this.data.p1stats.loses;
        }
        if (this.data.rolep2[winningParty] != null) {
          ++this.data.p2stats.wins;
        } else {
          ++this.data.p2stats.loses;
        }
        localStorage[this.data.player1] = JSON.stringify(this.data.p1stats);
        return localStorage[this.data.player2] = JSON.stringify(this.data.p2stats);
      },
      checkWin: function() {
        var key, value, _ref, _ref1, _results;
        _ref = this.data.x;
        for (key in _ref) {
          value = _ref[key];
          if (value >= 3) {
            localStorage.x++;
            this.addAlert("X wins");
            this.data.gameOver = true;
            this.addToScore("X");
          }
        }
        _ref1 = this.data.o;
        _results = [];
        for (key in _ref1) {
          value = _ref1[key];
          if (value >= 3) {
            localStorage.o++;
            this.addAlert("O wins");
            this.data.gameOver = true;
            _results.push(this.addToScore("O"));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      checkEnd: function() {
        var col, column, diagonal, diagonals, end, middle, row, start, _i, _j, _k, _l, _len, _len1, _results;
        this.data.x = {};
        this.data.o = {};
        diagonals = [[0, 4, 8], [2, 4, 6]];
        for (_i = 0, _len = diagonals.length; _i < _len; _i++) {
          diagonal = diagonals[_i];
          for (_j = 0, _len1 = diagonal.length; _j < _len1; _j++) {
            col = diagonal[_j];
            this.checkField(col, 'diagonal');
          }
          this.checkWin();
          this.emptyStorageVar('diagonal');
        }
        _results = [];
        for (row = _k = 0; _k <= 2; row = ++_k) {
          start = row * 3;
          end = (row * 3) + 2;
          middle = (row * 3) + 1;
          this.checkField(start, 'start');
          this.checkField(middle, 'middle');
          this.checkField(end, 'end');
          this.checkWin();
          for (column = _l = start; start <= end ? _l <= end : _l >= end; column = start <= end ? ++_l : --_l) {
            this.checkField(column, 'horizontal');
          }
          this.checkWin();
          _results.push(this.emptyStorageVar('horizontal'));
        }
        return _results;
      },
      emptyStorageVar: function(storageVar) {
        this.data.x[storageVar] = null;
        return this.data.o[storageVar] = null;
      },
      checkField: function(field, storageVar) {
        if ($(".tic").eq(field).hasClass("x")) {
          if (this.data.x[storageVar] != null) {
            return this.data.x[storageVar]++;
          } else {
            return this.data.x[storageVar] = 1;
          }
        } else if ($(".tic").eq(field).hasClass("o")) {
          if (this.data.o[storageVar] != null) {
            return this.data.o[storageVar]++;
          } else {
            return this.data.o[storageVar] = 1;
          }
        }
      },
      addListeners: function() {
        return $(".tic").click(function() {
          if (Tic.data.gameOver === false && !$(this).text().length) {
            if (Tic.data.turns % 2 === 0) {
              $(this).html("X").addClass("x moved");
            } else if (Tic.data.turns % 2 !== 0) {
              $(this).html("O").addClass("o moved");
            }
            Tic.data.turns++;
            Tic.checkEnd();
            if (Tic.data.gameOver !== true && $(".moved").length >= 9) {
              return Tic.addToScore("none");
            }
          }
        });
      },
      addAlert: function(msg, position) {
        var notice;
        if (position == null) {
          position = '';
        }
        if (position === 'center') {
          notice = $("header div");
        } else {
          notice = $("div.notice");
        }
        notice.children().remove();
        notice.append("<p class='gameAlert'> " + msg + " </p>").slideDown('slow');
        return $("body").animate({
          scrollTop: notice.offset().top
        }, 'slow');
      },
      addMessage: function(msg, replaceContents) {
        var messagesContainer;
        if (msg == null) {
          msg = "";
        }
        if (replaceContents == null) {
          replaceContents = true;
        }
        messagesContainer = $(".board");
        if (replaceContents) {
          messagesContainer.children().not("div").remove();
        }
        if (msg) {
          messagesContainer.append(msg);
        }
        return messagesContainer.css("display", "inline-block").show();
      }
    };
    $("form").on("submit", function(evt) {
      var namesValid;
      evt.preventDefault();
      namesValid = $("input[type='text']").filter(function() {
        return this.value.trim() !== "";
      }).length === 2 && $("input:text").eq(0).val() !== $("input:text").eq(1).val();
      if (namesValid) {
        return Tic.initialize();
      } else {
        return Tic.addAlert("Player names cannot be empty or the same", 'center');
      }
    });
    $(".close").click(function() {
      return $(this).parent().slideUp('slow');
    });
    return $("body").on("click", ".play-again", function() {
      return Tic.initialize();
    });
  });

}).call(this);
